{% extends "/exshipper/exshipper_base.html"%} {% block main_content %}
<div
	style="text-align: center; margin: 0px auto; position: fixed; width: 100%; background-color: #fff; z-index: 100;">
	<p style="font-size: 26px;">{{title}}</p>
	<hr>
</div>

<div
	style="position: absolute; top: 100px; margin: 10px auto; width: 100%; text-align: center;">
	<p>ExShipper Services for Internal Use</p>
	<br>
	<div>
		<a
			href="/exshipper_general_clients_login_handler?dispatch_token=creating_client_info"
			target="_blank">Add New Client Information</a><br /> <a
			href="/exshipper_general_clients_login_handler?dispatch_token=creating_invoice"
			target="_blank">Add New Invoice</a><br /> <a
			href="/exshipper_general_clients_login_handler?dispatch_token=track_package_status"
			target="_blank">Track Package Status</a><br />
	</div>

	<br>
	<div>

		<canvas id="canvas" width=1 height=1
			style="border: 1px solid #fff; visibility: hidden"></canvas>
		<button onclick="render()">Show Barcode</button>

		<script type="text/javascript">
			$(document).ready(function() {
				// Sort the symbols
				symdesc.pop(); // remove the null last entry
				symdesc.sort(function(a, b) {
					return (a.desc < b.desc ? -1 : 1);
				});

				// Create the select list
				var sel = document.getElementById('symbol');
				for ( var i = 0; i < symdesc.length; i++) { // last entry is null
					var opt = document.createElement('option');
					opt.text = symdesc[i].desc;
					opt.value = i;
					sel.add(opt, null);
				}

				$(sel).change(function(ev) {
					var sym = symdesc[this.selectedIndex];
					if (sym) {
						$('#symtext').val(sym.text);
						$('#symopts').val(sym.opts);
					} else {
						$('#symtext').val('');
						$('#symopts').val('');
					}
					$('#symaltx').val('');
				}).trigger('change');

				$('#menu span.button.up').click(function(ev) {
					var inp = $('#scale');
					var val = (parseFloat(inp.val()) || 1) + 1;
					inp.val(val > 10 ? 10 : val);
					ev.stopImmediatePropagation();
					ev.preventDefault();
				}).dblclick(function(ev) {
					ev.stopImmediatePropagation();
					ev.preventDefault();
				}).mousedown(function(ev) {
					ev.stopImmediatePropagation();
					ev.preventDefault();
				});
				$('#menu span.button.dn').click(function(ev) {
					var inp = $('#scale');
					var val = (parseFloat(inp.val()) || 1) - 1;
					inp.val(val <= 0 ? 1 : val);
					ev.stopImmediatePropagation();
					ev.preventDefault();
				}).dblclick(function(ev) {
					ev.stopImmediatePropagation();
					ev.preventDefault();
				}).mousedown(function(ev) {
					ev.stopImmediatePropagation();
					ev.preventDefault();
				});

			});

			function render() {
				var elt = symdesc[$('#symbol')[0].selectedIndex];
				var text = $('#symtext').val().replace(/^\s+/, '').replace(
						/\s+$/, '');
				var altx = $('#symaltx').val().replace(/^\s+/, '').replace(
						/\s+$/, '');
				var opts = $('#symopts').val().replace(/^\s+/, '').replace(
						/\s+$/, '');

				var bw = new BWIPJS;

				// Convert the options to a dictionary object, so we can pass alttext with
				// spaces.
				var tmp = opts.split(' ');
				opts = {};
				for ( var i = 0; i < tmp.length; i++) {
					if (!tmp[i])
						continue;
					var eq = tmp[i].indexOf('=');
					if (eq == -1)
						opts[tmp[i]] = bw.value(true);
					else
						opts[tmp[i].substr(0, eq)] = bw.value(tmp[i]
								.substr(eq + 1));
				}

				// Add the alternate text
				if (altx)
					opts.alttext = bw.value(altx);

				// Add any hard-coded options required to fix problems in the javascript
				// emulation. 
				opts.inkspread = bw.value(0);
				if (needyoffset[elt.sym] && !opts.textxalign
						&& !opts.textyalign && !opts.alttext
						&& opts.textyoffset === undefined)
					opts.textyoffset = bw.value(-10);

				var rot = 'N';
				var rots = [ 'rotL', 'rotR', 'rotI' ];
				for ( var i = 0; i < rots.length; i++) {
					if (document.getElementById(rots[i]).checked) {
						rot = rots[i].charAt(3);
						break;
					}
				}

				bw.bitmap(new Bitmap);

				var scl = parseInt(document.getElementById('scale').value, 10) || 2;
				bw.scale(scl, scl);

				var div = document.getElementById('output');
				if (div)
					div.innerHTML = '';

				bw.push(text);
				bw.push(opts);

				try {
					bw.call(elt.sym);
					bw.bitmap().show('canvas', rot);
				} catch (e) {
					var s = '';
					if (e.fileName)
						s += e.fileName + ' ';
					if (e.lineNumber)
						s += '[line ' + e.lineNumber + '] ';
					alert(s + (s ? ': ' : '') + e.message);
				}
			}
		</script>
	</div>
</div>
{% endblock %}
