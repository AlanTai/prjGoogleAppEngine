# -*- coding: utf-8 -*-
'''
Created on Oct 1, 2013

@author: Alan Tai
'''

__author__ = 'Alan Tai'

import webapp2
import jinja2
import os
from google.appengine.api import users, mail, memcache
import json

from app_dict import key_value
from models import Size, InvoiceInfo, SUDATrackingNumber_REGULAR, \
    SpearnetPackagesInfo

jinja_environment = jinja2.Environment(loader=jinja2.FileSystemLoader(os.path.dirname(__file__) + '/static/templates'))
# jinja_environment = jinja2.Environment(loader = jinja2.FileSystemLoader(os.path.dirname(__file__)+'/static/templates/exshipper'))


# default index page
class ExWINE(webapp2.RequestHandler):
    def get(self):
        
        user_info = get_users_info(self, users)
            
        template_values = {
                           'title' : key_value.get('index_title'),
                           'page_tag': key_value.get('page_tag_index')}
        template_values.update(user_info)
        
        template = jinja_environment.get_template(key_value.get('index_page'))
        self.response.out.write(template.render(template_values))
        
# info. page dispatcher
class InfoPageDispatcher(webapp2.RedirectHandler):
    def post(self):
        if self.request.get('fmt') == 'json':
            ajax_data = {'submission':'Done'}
            self.response.out.headers['Content-Type'] = 'text/json'
            self.response.out.write(json.dumps(ajax_data))
            return
    
    def get(self):
        # default info
        user_info = get_users_info(self, users)
        
        info_page = key_value.get('index_page')
        title_page = key_value.get('index_title')
        request_page = self.request.get('info_page_request')
        
        if request_page:
            
            if request_page == key_value.get('request_page_services'):
                info_page = key_value.get('service_page')
                title_page = key_value.get('service_title')
                
            elif request_page == key_value.get('request_page_logistics'):
                info_page = key_value.get('logistics_page')
                title_page = key_value.get('logistics_title')
                
            elif request_page == key_value.get('request_page_logistics_requirement'):
                info_page = key_value.get('logistics_requirement_page')
                title_page = key_value.get('logistics_requirement_title')
                
            elif request_page == key_value.get('request_page_question_answer'):
                info_page = key_value.get('question_answer_page')
                title_page = key_value.get('question_answer_title')
            
        template_values = {'title': title_page,
                           'page_tag': key_value.get('page_tag_link_page') }
        template_values.update(user_info)
        
        template = jinja_environment.get_template(info_page)
        self.response.out.write(template.render(template_values))
        
# contact page dispatcher
class ContactPageDispatcher(webapp2.RequestHandler):
    def post(self):
        ajax_data = {'email_confirmation':'unknown'}
        if self.request.get('fmt') == 'json':
            receiver_address = self.request.get('receiver_address')
            sender_address = self.request.get('sender_address')
            subject = self.request.get('subject')
            body = self.request.get('body')
            
            # pass info. to email function
            result = exwine_send_email(receiver_address, sender_address, subject, body)
            
            ajax_data['email_confirmation'] = result['email_status']
            self.response.out.headers['Content-Type'] = 'text/json'
            self.response.out.write(json.dumps(ajax_data))
            return
        else:
            ajax_data['email_confirmation'] = 'wrong_data_format'
            self.response.out.headers['Content-Type'] = 'text/json'
            self.response.out.write(json.dumps(ajax_data))
            return
        
        
    # dispatching request
    def get(self):
        
        # default info
        user_info = get_users_info(self, users)
        request_page = self.request.get('contact_info_request')
        
        contact_page = key_value.get('index_page')
        title_page = key_value.get('index_title')
        
        if request_page:
            if request_page == key_value.get('request_page_contact_exshipper'):
                contact_page = key_value.get('contact_exshipper_page')
                title_page = key_value.get('contact_exshipper_title')
                receiver_email = 'koseioyama@gmail.com'
            elif request_page == key_value.get('request_page_contact_winever'):
                contact_page = key_value.get('contact_winever_page')
                title_page = key_value.get('contact_winever_title')
                receiver_email = 'winever.tw@gmail.com'
        
        template_values = {'title': title_page,
                           'page_tag':key_value.get('page_tag_link_page'),
                           'receiver':receiver_email}
        template_values.update(user_info)
        
        template = jinja_environment.get_template(contact_page)
        self.response.out.write(template.render(template_values))


class ExShipperIndexHandler(webapp2.RequestHandler):
    def get(self):
        user_info = get_users_info(self, users)
        index_page = key_value.get('exshipper_index_page')
        
        template_values = {'title':key_value.get('exshipper_index_page_title')}
        template_values.update(user_info)
        
        template = jinja_environment.get_template(index_page)
        self.response.out.write(template.render(template_values))

# for handling the login process
'''working on'''
class ExShipperLoginHandler(webapp2.RequestHandler):
    def get(self):
        user_info = get_users_info(self, users)
        login_page = key_value.get('exshipper_login_page')
        
        caller_page = self.request.get('caller_page')
        
        template_values = {'title':key_value.get('exhsipper_login_page_title'), 'caller_page':caller_page}
        template_values.update(user_info)
        
        template = jinja_environment.get_template(login_page)
        self.response.out.write(template.render(template_values))
        
    def post(self):
        user_info = get_users_info(self, users)
        caller_page = self.request.get('caller_page')
        exshipper_account = self.request.get('exshipper_account')
        exshipper_password = self.request.get('exshipper_password')
        template_values = {}
        
        html_page = key_value.get('exshipper_invalid_login_page')
        html_page_title = key_value.get('exshipper_invalid_login_page_title')
        
        # html page dispatching
        if(caller_page == 'exshipper_invoice'):
            if(exshipper_account == 'alantaiinvoice' and exshipper_password == '1014lct'):
                html_page = key_value.get('exshipper_invoice_page')
                html_page_title = key_value.get('exshipper_invoice_page_title')
                
        elif(caller_page == 'exshipper_invoice_log'):
            if(exshipper_account == 'alantaiinvoicelog' and exshipper_password == '1014lct'):
                html_page = key_value.get('exshipper_invoice_log_page')
                html_page_title = key_value.get('exshipper_invoice_log_title')
                
                # use memcache
                # ignore the undefined variable because both def get() and add() work fine
                data = memcache.get('invoice_log')
                if data is not None:
                    log_invoice = data
                else:
                    data = InvoiceInfo.query()
                    memcache.add('invoice_log', data, 1000)
                    log_invoice = data
                template_values.update({'invoice_log':log_invoice})
            # end of memcache
                
        elif(caller_page == 'exshipper_suda_tracking_number'):
            if(exshipper_account == 'alantaisuda' and exshipper_password == '1014lct'):
                html_page = key_value.get('exshipper_suda_tracking_number_handler_page')
                html_page_title = key_value.get('exshipper_suda_tracking_number_handler_page_title')
                
        elif(caller_page == 'exshipper_spearnet_customer_package_info_log'):
            if(exshipper_account == 'alantaispearnet' and exshipper_password == '1014lct'):
                html_page = key_value.get('exshipper_spearnet_customer_package_info_log_page')
                html_page_title = key_value.get('exshipper_spearnet_customer_package_info_log_page_title')
                
                #use memcache
                data = memcache.get('spearnet_customer_package_info_log')
                if data is not None:
                    log_spearnet_customer_package_info = data
                else:
                    data = SpearnetPackagesInfo.query()
                    memcache.add('spearnet_customer_package_info_log',data,1000)
                    log_spearnet_customer_package_info = data
                template_values.update({'spearnet_customer_package_info_log':log_spearnet_customer_package_info})
                  
        else:
            html_page = key_value.get('exshipper_invalid_login_page')
            html_page_title = key_value.get('exshipper_invalid_login_page_title')
            
        template_values.update({'title':html_page_title})
        template_values.update(user_info)
        template = jinja_environment.get_template(html_page)
        self.response.out.write(template.render(template_values))
        # end of html page dispatching
        
# end of ExShipperLoginHandler

class ExShipperInvoiceInfoHandler(webapp2.RequestHandler):
    def post(self):
        ajax_data = {'invoice_info_submission':'NA'}
        if(self.request.get('fmt') == 'json'):
            
            new_size = Size()
            new_size.length = self.request.get('valid_size_length')
            new_size.width = self.request.get('valid_size_width')
            new_size.height = self.request.get('valid_size_height')
            
            new_size.put()
            
            new_invoice = InvoiceInfo()
            new_invoice.yamato_tr_number = self.request.get('valid_yamato_tr_number')
            new_invoice.ref_number = self.request.get('valid_ref_number')
            new_invoice.shipper = self.request.get('valid_shipper')
            new_invoice.consignee_english = self.request.get('valid_consignee_en')
            new_invoice.consignee_chinese = self.request.get('valid_consignee_ch')
            new_invoice.address = self.request.get('valid_address')
            new_invoice.consignee_phone_number = self.request.get('valid_phone_number')
            new_invoice.weight = self.request.get('valid_weight')
            new_invoice.size = new_size
            
            new_invoice.put()
            
            ajax_data['invoice_info_submission'] = 'Data saved into database'
            self.response.out.headers['Content-Type'] = 'text/json'
            self.response.out.write(json.dumps(ajax_data))
            return


class ExShipperSUDATrackingNumberHandler(webapp2.RequestHandler):
    def get(self):
        user_info = get_users_info(self, users)
        invoice_log_page = key_value.get('exshipper_suda_tracking_number_handler_page')
            
        template_values = {'title':key_value.get('exshipper_suda_tracking_number_handler_title')}
        template_values.update(user_info)
            
        template = jinja_environment.get_template(invoice_log_page)
        self.response.out.write(template.render(template_values))
        
    def post(self):
        ajax_data = {'suda_tracking_number_submission':'NA'}
        if(self.request.get('fmt') == 'json'):
            json_obj = json.loads(self.request.get('json_info'))
            suda_number_array = json_obj['suda_tracking_numbers']
            for row_info in suda_number_array:
                new_suda_tr_number = SUDATrackingNumber_REGULAR(id=row_info['suda_number'])
                new_suda_tr_number.tracking_number = row_info['suda_number']
                new_suda_tr_number.used_mark = row_info['used_mark']
                new_suda_tr_number.put()
                
            ajax_data['suda_tracking_number_submission'] = 'Data saved into database'
            self.response.out.headers['Content-Type'] = 'text/json'
            self.response.out.write(json.dumps(ajax_data))


# -- Client Spearnet Session
class ExShipperSpearnetIndexHandler(webapp2.RequestHandler):
    def get(self):
        user_info = get_users_info(self, users)
        exshipper_spearnet_index_page = key_value.get('exshipper_spearnet_index_page')
        
        template_values = {'title':key_value.get('exshipper_spearnet_index_page_title')}
        template_values.update(user_info)
        
        template = jinja_environment.get_template(exshipper_spearnet_index_page)
        self.response.out.write(template.render(template_values))

class ExShipperSpearnetLoginHandler(webapp2.RequestHandler):
    def get(self):
        user_info = get_users_info(self, users)
        login_page = key_value.get('exshipper_spearnet_login_page')
        
        caller_page = self.request.get('caller_page')
        
        template_values = {'title':key_value.get('exshipper_spearnet_login_page_title'), 'caller_page':caller_page}
        template_values.update(user_info)
        
        template = jinja_environment.get_template(login_page)
        self.response.out.write(template.render(template_values))
        
    def post(self):
        user_info = get_users_info(self, users)
        caller_page = self.request.get('caller_page')
        spearnet_account = self.request.get('spearnet_account')
        spearnet_password = self.request.get('spearnet_password')
        template_values = {}
        
        html_page = key_value.get('exshipper_invalid_login_page')
        html_page_title = key_value.get('exshipper_invalid_login_page_title')
        
        # html page dispatching
        if(caller_page == 'exshipper_spearnet_data_exchange'):
            if(spearnet_account == 'spearnet' and spearnet_password == '1941dataexchange'):
                html_page = key_value.get('exshipper_spearnet_data_exchange_page')
                html_page_title = key_value.get('exshipper_spearnet_data_exchange_page_title')
                
        elif(caller_page == 'exshipper_spearnet_suda_tracking_number_download'):
            if(spearnet_account == 'spearnet' and spearnet_password == 'spearnet1941'):
                html_page = key_value.get('exshipper_spearnet_suda_tracking_number_download_page')
                suda_tracking_numbers = SUDATrackingNumber_REGULAR.query(SUDATrackingNumber_REGULAR.used_mark == 'FALSE').fetch(1)
                template_values = {'title':key_value.get('exshipper_spearnet_suda_tracking_number_download_page_title')}
                
                if suda_tracking_numbers:
                    for suda_tracking_number in suda_tracking_numbers:
                        suda_entity = SUDATrackingNumber_REGULAR.get_by_id(suda_tracking_number.tracking_number)
                        suda_entity.used_mark = 'TRUE'
                        suda_entity.put()
                            
                    template_values.update({'suda_numbers':suda_tracking_numbers})
                else:
                    template_values.update({'suda_numbers':'No SUDA TRacking Number Available'})
                    exshipper_send_email('jerry@spearnet-us.com', 'koseioyama@gmail.com', 'Notice for SUDA Tracking Number Shortage', '')
                    
                template_values.update(user_info)
                template = jinja_environment.get_template(html_page)
                self.response.out.write(template.render(template_values))
        else:
            html_page = key_value.get('exshipper_invalid_login_page')
            html_page_title = key_value.get('exshipper_invalid_login_page_title')
            
        template_values.update({'title':html_page_title})
        template_values.update(user_info)
        template = jinja_environment.get_template(html_page)
        self.response.out.write(template.render(template_values))
        # end of html page dispatching

# exshipper spearnet data-exchange handler
class ExShipperSpearnetDataExchangeDispatcher(webapp2.RequestHandler):
    def post(self):
        user_info = get_users_info(self, users)
        data_format = self.request.get('XLSX_XLS')
        
        if(data_format == 'XLS'):
            parser_page = key_value.get('exshipper_spearnet_xls_page')
            parser_page_title = key_value.get('exshipper_spearnet_xls_title')
        elif (data_format == 'XLSX'):
            parser_page = key_value.get('exshipper_spearnet_xlsx_page')
            parser_page_title = key_value.get('exshipper_spearnet_xlsx_title')
            
        template_values = {'title':parser_page_title}
        template_values.update(user_info)
            
        template = jinja_environment.get_template(parser_page)
        self.response.out.write(template.render(template_values))

class ExShipperSpearnetDataExchangeHandler(webapp2.RequestHandler):
    def post(self):
        ajax_data = {'spearnet_packages_info_upload_status':'NA','print_action':'off'}
        user_info = get_users_info(self, users)
        
        if(self.request.get('fmt') == 'json'):
            json_obj = json.loads(self.request.get('packages_data'))
            packages_array = json_obj['spearnet_invoice']
            for package in packages_array:
                query_result = SpearnetPackagesInfo.get_by_id(package['hawb'])
                if(query_result):
                    duplication = True;
                    ajax_data['spearnet_packages_info_upload_status']='You have a duplicated tracking number and please replace it with a new tracking number!'
                    ajax_data['print_action']='off'
                    break;
                else:
                    duplication = False;
                    
            if(duplication == False):
                for package in packages_array:
                    new_package = SpearnetPackagesInfo(id=package['hawb'])
                    new_package.index = package['index']
                    new_package.barcode_no = package['barcode_no']
                    new_package.hawb = package['hawb']
                    new_package.ctn = package['ctn']
                    new_package.weight_kg = package['g/w(kg)']
                    new_package.weight_lb = 'NA'
                    new_package.commodity_name = package['commodity_name']
                    new_package.pcs = 'NA'
                    new_package.unit = package['unit']
                    new_package.original = package['original']
                    new_package.unit_price_fob_us_dollar = 'NA'
                    new_package.deliver_to = package['deliver_to']
                    new_package.shipper_name = package['shipper_name']
                    new_package.shipper_person = 'NA' 
                    new_package.consignee_english_name = package['consignee_english_name']
                    new_package.consignee_chinese_name = package['consignee_chinese_name']
                    new_package.consignee_tel = package['consignee_tel']
                    new_package.consignee_address = package['consignee_address']
                    new_package.consignee_address_chinese = package['consignee_address_chinese']
                    new_package.company_id_or_personal_id = 'NA'
                    new_package.remark = package['remark']
                    new_package.declaration_need_or_not = package['declaration_need_or_not']
                    new_package.duty_paid_by = package['duty_paid_by']
                    new_package.package_status = 'exshipper' 
                    new_package.put()
                    
                ajax_data['spearnet_packages_info_upload_status'] = 'Data saved into database'
                ajax_data['print_action']='on'
                    
        self.response.out.headers['Content-Type'] = 'text/json'
        self.response.out.write(json.dumps(ajax_data))
        return
        
class ExShipperSpearnetPackagesPickupHandler(webapp2.RequestHandler):
    def post(self):
        user_info = get_users_info(self, users)
        items = self.request.get('spearnet_pickup_packages')
        json_obj = json.loads(self.request.get('spearnet_pickup_packages'))
        packages_suda_number_array = json_obj['suda_tracking_numbers']
        

class ExShipperSpearnetSUDATrackingNumberHandler(webapp2.RequestHandler):
    def post(self):
        user_info = get_users_info(self, users)
        spearnet_account = self.request.get('spearnet_account')
        spearnet_password = self.request.get('spearnet_password')
        
        if(spearnet_account == 'spearnet' and spearnet_password == 'spearnet1941'):
            html_page = key_value.get('exshipper_spearnet_suda_tracking_number_handler_page')
            suda_tracking_numbers = SUDATrackingNumber_REGULAR.query(SUDATrackingNumber_REGULAR.used_mark == 'FALSE').fetch(1)
            
            if suda_tracking_numbers:
                for suda_tracking_number in suda_tracking_numbers:
                    suda_entity = SUDATrackingNumber_REGULAR.get_by_id(suda_tracking_number.tracking_number)
                    suda_entity.used_mark = 'TRUE'
                    suda_entity.put()
                        
                template_values = {'title':key_value.get('exshipper_invoice_log_title'),
                                   'suda_numbers':suda_tracking_numbers}
                template_values.update(user_info)
                    
                template = jinja_environment.get_template(html_page)
                self.response.out.write(template.render(template_values))
            else:
                exshipper_send_email('jerry@spearnet-us.com', 'koseioyama@gmail.com', 'Notice for Running out of SUDA Tracking Number', '')
        else:
            self.response.headers['Content-Type'] = 'text/plain'
            self.response.write('Account or Password Are Incorrect!')
     
# working on
class ExShipperSpearnetCustomerIndexHandler(webapp2.RequestHandler):
    def get(self):
        user_info = get_users_info(self, users)
        html_page = key_value.get('exshipper_spearnet_customer_index_page')
        
        template_values = {'title':key_value.get('exshipper_spearnet_customer_index_page_title')}
        template_values.update(user_info)
        template = jinja_environment.get_template(html_page)
        self.response.out.write(template.render(template_values))   
            
class ExShipperSpearnetCustomerServicesHandler(webapp2.RequestHandler):
    def post(self):
        user_info = get_users_info(self, users)
        account = self.request.get('spearnet_customer_account')
        password = self.request.get('spearnet_customer_password')
        
        if(account == 'spearnetcustomer' and password == 'spearnetcustomer1941'):
            html_page = key_value.get('exshipper_spearnet_customer_services_handler_page')
            page_title = 'ExShipper Spearnet Customer Service Page'
        else:
            html_page = key_value.get('exshipper_invalid_login_page')
            page_title = 'Invalid Login Page'
        
        template_values = {'title':page_title}
        template_values.update(user_info)
        template = jinja_environment.get_template(html_page)
        self.response.out.write(template.render(template_values))

class ExShipperSpearnetCustomerPackageTrackingHandler(webapp2.RequestHandler):
    def post(self):
        ajax_data = {'package_status':'NA'}
        if(self.request.get('fmt') == 'json'):
            tracking_result = SpearnetPackagesInfo.query(SpearnetPackagesInfo.hawb == self.request.get('customer_tracking_number')).fetch(1)
            if(tracking_result):
                package_status = tracking_result[0].package_status
                ajax_data['package_status'] = package_status
                           
        self.response.out.headers['Content-Type'] = 'text/json'
        self.response.out.write(json.dumps(ajax_data))
        return
# end of exshipper & spearnet

# custom number handler for Android App
class ExshipperCustomEntryHandler(webapp2.RequestHandler):
    def post(self):
        account = self.request.get('account')
        password = self.request.get('password')
        if(account == 'alantai' and password == '1014'):
            self.response.headers['Content-Type'] = 'text/plain ; charset=UTF-8'
            self.response.write('{"custom_number":"測試504PW213"}')


# page for testing only
class TestHandler(webapp2.RequestHandler):
    def get(self):
        user_info = get_users_info(self, users)
        test_page = '/exshipper/exshipper_test.html'
            
        template_values = {'title':key_value.get('exshipper_invoice_log_title')}
        template_values.update(user_info)
            
        template = jinja_environment.get_template(test_page)
        self.response.out.write(template.render(template_values))
# self-defined functions

# ExShipper Send email
def exshipper_send_email(receiver, sender, subject, body):
    result = {'email_status':'unknown'}
    email_host = 'rainman.tai@gmail.com'
    if not mail.is_email_valid(receiver):
        result['email_status'] = 'invalid_email'
    else:
        try:
            receiver_email_content = 'Notice: The SUDA tracking number ran out and new numbers will be ready soon. If you have further questions, please contact ExShipper.'
            mail.send_mail(email_host, receiver, subject, receiver_email_content)
            sender_email_content = 'Notice: The SUDA tracking number ran out. Please update the database!'
            mail.send_mail(email_host, receiver, subject, sender_email_content)
            result['email_status'] = 'success'
        except:
            result['email_status'] = 'fail'
    return result

# ExWINE send email
def exwine_send_email(receiver, sender, subject, body):
    
    result = {'email_status':'unknown'}
    email_host = 'rainman.tai@gmail.com'
    if not mail.is_email_valid(receiver):
        # response invalid information back to webpage
        result['email_status'] = 'invalid_email'
    else:
        try:
            receiver_email_content = 'Thank you very much for contacting ExWINE.\n' + 'Your Question or Comments:\n' + body
            mail.send_mail(email_host, receiver, subject, receiver_email_content)
            sender_email_content = 'Question or Comments from ' + receiver + ':\n' + body
            mail.send_mail(email_host, sender, subject, sender_email_content)
            
            result['email_status'] = 'success'
        except:
            result['email_status'] = 'fail'
    
    return result

# get users info
def get_users_info(self, users):
    if users.get_current_user():
        user_account = users.get_current_user()
        url = users.create_logout_url(self.request.uri)
        url_linktxt = key_value.get('logout_txt')
    else:
        user_account = key_value.get('unknown_user_txt')
        url = users.create_login_url(self.request.uri)
        url_linktxt = key_value.get('login_txt')
        
    values = {
              'user_account': user_account,
              'url': url,
              'url_linktxt': url_linktxt}
    return values
# end of self-defined functions


# set url
app = webapp2.WSGIApplication([('/exwine', ExWINE),
                               ('/info_page_dispatcher', InfoPageDispatcher),
                               ('/contact_page_dispatcher', ContactPageDispatcher),
                               ('/exshipper_index', ExShipperIndexHandler),
                               ('/exshipper_login_handler', ExShipperLoginHandler),
                               ('/exshipper_invoice_info_handler', ExShipperInvoiceInfoHandler),
                               ('/exshipper_spearnet_index_page', ExShipperSpearnetIndexHandler),
                               ('/exshipper_spearnet_login_handler', ExShipperSpearnetLoginHandler),
                               ('/exshipper_spearnet_data_exchange_page', ExShipperSpearnetDataExchangeDispatcher),
                               ('/exshipper_spearnet_data_exchange_handler', ExShipperSpearnetDataExchangeHandler),
                               ('/exshipper_suda_tracking_number_handler', ExShipperSUDATrackingNumberHandler),
                               ('/exshipper_spearnet_suda_tracking_number_handler', ExShipperSpearnetSUDATrackingNumberHandler),
                               ('/exshipper_custom_entry_handler', ExshipperCustomEntryHandler),
                               ('/exshipper_spearnet_customer_index_page', ExShipperSpearnetCustomerIndexHandler),
                               ('/exshipper_spearnet_customer_services_handler', ExShipperSpearnetCustomerServicesHandler),
                               ('/exshipper_spearnet_customer_package_tracking_handler', ExShipperSpearnetCustomerPackageTrackingHandler),
                               ('/exshipper_test', TestHandler)], debug=True)
